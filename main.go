package main

import (
	"flag"
	"os"

	"github.com/opensourceways/server-common-lib/logrusutil"
	liboptions "github.com/opensourceways/server-common-lib/options"
	"github.com/sirupsen/logrus"

	"github.com/opensourceways/robot-gitee-lib/client"
	"github.com/opensourceways/robot-gitee-lib/framework"
)

type options struct {
	service     liboptions.ServiceOptions
	gitee       liboptions.GiteeOptions
	RemoveToken bool
}

func (o *options) Validate() error {
	if err := o.service.Validate(); err != nil {
		return err
	}

	return o.gitee.Validate()
}

func gatherOptions(fs *flag.FlagSet, args ...string) options {
	var o options

	o.gitee.AddFlags(fs)
	o.service.AddFlags(fs)
	fs.BoolVar(&o.RemoveToken, "rm-token", true, "whether remove the token file after initialized .")

	fs.Parse(args)
	return o
}

func main() {
	logrusutil.ComponentInit(botName)

	o := gatherOptions(flag.NewFlagSet(os.Args[0], flag.ExitOnError), os.Args[1:]...)
	if err := o.Validate(); err != nil {
		logrus.WithError(err).Fatal("Invalid options")
	}

	getToken := func() []byte {
		t, err := os.ReadFile(o.gitee.TokenPath)
		if err != nil {
			logrus.WithError(err).Fatal("read token file failed")
		}

		return t
	}

	c := client.NewClient(getToken)

	r, err := newRobot(c)
	if err != nil {
		logrus.WithError(err).Fatal("new robot failed")
	}

	if o.RemoveToken {
		os.Remove(o.gitee.TokenPath)
	}

	framework.Run(r, o.service)
}
